// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bio           String?
    posts         Post[]
    password      String
    role          UserRole  @default(MEMBER)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    tasks         Task[]
    assignedTasks Task[]    @relation("TaskAssignee")
    projects      ProjectMember[]
    createdProjects Project[] @relation("ProjectCreator")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String

  creator     User @relation("ProjectCreator", fields: [creatorId], references: [id])
  members     ProjectMember[]
  tasks       Task[]
}

model ProjectMember {
  id        String @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  projectId   String
  creatorId   String
  assigneeId  String?

  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator     User @relation(fields: [creatorId], references: [id])
  assignee    User? @relation("TaskAssignee", fields: [assigneeId], references: [id])
  tags        TaskTag[]
}

model Tag {
  id        String @id @default(cuid())
  name      String @unique
  color     String @default("#3B82F6")
  createdAt DateTime @default(now())

  tasks     TaskTag[]
}

model TaskTag {
  taskId String
  tagId  String

  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag    Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
}

enum UserRole {
  ADMIN
  MEMBER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}